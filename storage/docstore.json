{"docstore/metadata": {"bd901038-e6e2-4a69-ac42-462d9b235468": {"doc_hash": "1e3f12ec5bcf6d5c635dcb3a8baa2c3bcbcd8786b0ad64acc8eea5b5128701a3"}, "dcb4ce42-7449-4469-857a-86386229ca35": {"doc_hash": "08ac4ff1087b61296575c44e4d1f27dd39becfc2f51923ee0161ddccb5617119"}, "3fca59c1-b82b-4665-b846-390042bdf7b1": {"doc_hash": "12af8a334153af082befb1577952bae4334fd4b033a3681e90f32bb9eeb9c773"}, "56ba40f2-a99c-4108-af86-9e4746825855": {"doc_hash": "ea601026f5d4d26182b7f62fb2bee305047441e7f4e22fe2ee3bb657411b84f1", "ref_doc_id": "bd901038-e6e2-4a69-ac42-462d9b235468"}, "1fff9592-5e75-4e17-ab5f-d5f5fc556512": {"doc_hash": "e8b427ffb35cf3bcbe639e04b197759760524cff5867a2d228ec138682cdcce9", "ref_doc_id": "bd901038-e6e2-4a69-ac42-462d9b235468"}, "f6ac0203-1897-48df-9cb1-83bd14eb5c34": {"doc_hash": "b89caeaee19b004de1f62390252ef5cc1db83dfa3fa5c29520644704ffe53a7a", "ref_doc_id": "bd901038-e6e2-4a69-ac42-462d9b235468"}, "89e72b12-2bc4-40a1-91b4-01307627b8e4": {"doc_hash": "a2fa4cf62631fdd7e2d1e83f06a2c588f6e14f44189288c1e27396f1243e951a", "ref_doc_id": "dcb4ce42-7449-4469-857a-86386229ca35"}, "8e52e210-16a4-4f1c-b9db-19a9ed1d0105": {"doc_hash": "2c73dc9adc60ec8fc57c436751956740cdd7dcf1d8dfb77b4b8dc83f631be70a", "ref_doc_id": "dcb4ce42-7449-4469-857a-86386229ca35"}, "5a0ea48c-68b8-468b-87e5-14affe61d671": {"doc_hash": "7699096d3aa5b633765623e7a111eda303336cd8dcf1c09a9510454448aa9405", "ref_doc_id": "3fca59c1-b82b-4665-b846-390042bdf7b1"}, "668a34a7-7e1b-4d1d-b729-857758390c88": {"doc_hash": "eaf9e2a29cff048a23e67ea93fa86f7461df202a56e503ae23e51b081905baa4", "ref_doc_id": "3fca59c1-b82b-4665-b846-390042bdf7b1"}}, "docstore/data": {"56ba40f2-a99c-4108-af86-9e4746825855": {"__data__": {"id_": "56ba40f2-a99c-4108-af86-9e4746825855", "embedding": null, "metadata": {"file_path": "documents/Mobile_App_Stability_Outlook_2023.txt", "file_name": "Mobile_App_Stability_Outlook_2023.txt", "file_type": "text/plain", "file_size": 12160, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd901038-e6e2-4a69-ac42-462d9b235468", "node_type": "4", "metadata": {"file_path": "documents/Mobile_App_Stability_Outlook_2023.txt", "file_name": "Mobile_App_Stability_Outlook_2023.txt", "file_type": "text/plain", "file_size": 12160, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "hash": "1e3f12ec5bcf6d5c635dcb3a8baa2c3bcbcd8786b0ad64acc8eea5b5128701a3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1fff9592-5e75-4e17-ab5f-d5f5fc556512", "node_type": "1", "metadata": {}, "hash": "61170dfc8131416dcde80bd644e712db28a71358a8fa9f6f7efd1ff80be79595", "class_name": "RelatedNodeInfo"}}, "text": "Mobile App Stability Outlook 2023\nGet a holistic view of the current state of mobile app stability and understand the relationship between stability and app store ratings.\nIn an increasingly mobile-first world, the mobile app industry has developed into a complex and competitive landscape that poses a multitude of challenges for apps to tackle. Mobile app stability has always been a critical factor for success, and as the demand for mobile apps continues to grow, mobile user expectations have become exacting.\n\nAt Instabug, we pride ourselves on partnering with mobile teams across the globe to deliver exceptional mobile experiences. This gives us unprecedented insight into what makes for the most successful qualities of the world\u2019s biggest and best apps. We recently analyzed the aggregate stability data of the apps using Instabug\u2019s platform in an effort to shed light on the current state of mobile app stability and provide a benchmark for mobile teams to set the right targets on their path to mobile excellence.\n\nKey Takeaways\n\nMobile app stability and app store ratings are directly and closely related. Mobile teams need to regard app stability as a critical imperative for 5-star ratings and success in mobile app stores.\n\u2018Five 9s\u2019 stability has proven to be a viable target for successful mobile teams, and the commonly held target of 99.9% crash-free sessions is now considered insufficient and outdated.\nCrash-free sessions are not enough; mobile users will take to the app store if they encounter too many stability issues other than crashes. Successful mobile teams must adopt a more holistic view of their app stability to include less fatal stability issues and user frustration signals.\n\nStability is a Prerequisite for Mobile App Success\nOur report goes beyond mobile app crashes and encompasses a range of mobile-specific metrics to paint a more accurate picture of the user experience and the stability of mobile apps when they\u2019re not crashing. The analysis reveals a strong correlation between stability and app store star ratings and high overall performance when it comes to app stability.\n\n90% of mobile users consider app store ratings to be an essential factor in their evaluation of new apps and 50% of mobile users will not even consider an app rated below three stars. Moreover, more than 60% of mobile users who face issues with a mobile app actively try to discourage others from using the app, commonly through app stores.\n\nWhile there can be many reasons behind negative app store ratings, apps with a low stability score are significantly more likely to receive an app rating below 3 stars. This underscores the need for mobile teams to target flawless mobile app stability to drive a 5-star app store rating.\n\nRead on to discover the latest benchmarks across Crash-Free Sessions, Out-Of-Memory errors (OOM), Application Not Responding errors (ANR), App Hangs, and Forced Restarts.\n\nHigh standards for mobile app stability\nCrash-free session rate: The percentage of mobile app sessions that did not end with a fatal error.\n\nAs the undisputed bane of mobile app stability, crashes are extremely disruptive to the user experience, terminating it altogether. The data reveals a median crash-free session rate of 99.94%, suggesting a high level of stability across all apps.\n\nAt the 75th percentile, the top-performing mobile apps score an impressive 99.99% crash-free rate, confirming that \u2018five 9s\u2019 stability is a valid target for mobile teams. On the other end of the spectrum, apps at the 25th percentile lag behind with a crash-free session rate of 99.76%.\n\nThis data makes it plain that mobile teams targeting anything lower than a 99.95% crash-free session rate should revisit their stability targets or risk being outperformed by the competition.\n\nAndroid scores a surprise win\nSurprisingly, our data set sees Android apps scoring a win over iOS in terms of stability with crash-free session rates of 99.95% and 99.87% respectively. This is true even among the top 25% performing apps on each platform at 99.99% and 99.96%.\n\nDespite the high degree of fragmentation in the Android ecosystem, high levels of stability have proven to be quite achievable. Mobile teams should not accept lower stability from their Android apps and must give priority to their app stability to achieve good results.\n\nA marked difference between industries\nBreaking down our data by industry reveals a relatively high degree of stability overall, with some clear winners and losers.\n\nLeading the pack, educational apps scored an impressive median of 100% crash-free sessions, further confirming the viability of the \u2018five 9s\u2019 stability target. Automotive apps came at a very close second with a 99.99% crash-free session rate.\n\nFood and beverage services scored the lowest median crash-free session rate at 99.79%, followed closely by media and entertainment at 99.84% and advertising at 99.89%. The remaining industries registered a respectable median crash-free score between 99.92% and 99.94%.", "start_char_idx": 0, "end_char_idx": 5020, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1fff9592-5e75-4e17-ab5f-d5f5fc556512": {"__data__": {"id_": "1fff9592-5e75-4e17-ab5f-d5f5fc556512", "embedding": null, "metadata": {"file_path": "documents/Mobile_App_Stability_Outlook_2023.txt", "file_name": "Mobile_App_Stability_Outlook_2023.txt", "file_type": "text/plain", "file_size": 12160, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd901038-e6e2-4a69-ac42-462d9b235468", "node_type": "4", "metadata": {"file_path": "documents/Mobile_App_Stability_Outlook_2023.txt", "file_name": "Mobile_App_Stability_Outlook_2023.txt", "file_type": "text/plain", "file_size": 12160, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "hash": "1e3f12ec5bcf6d5c635dcb3a8baa2c3bcbcd8786b0ad64acc8eea5b5128701a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56ba40f2-a99c-4108-af86-9e4746825855", "node_type": "1", "metadata": {"file_path": "documents/Mobile_App_Stability_Outlook_2023.txt", "file_name": "Mobile_App_Stability_Outlook_2023.txt", "file_type": "text/plain", "file_size": 12160, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "hash": "ea601026f5d4d26182b7f62fb2bee305047441e7f4e22fe2ee3bb657411b84f1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f6ac0203-1897-48df-9cb1-83bd14eb5c34", "node_type": "1", "metadata": {}, "hash": "2f0d0d30c648098119789c3726ef874af0d33a7d7eafa01c594478b545ca68ad", "class_name": "RelatedNodeInfo"}}, "text": "Despite the high degree of fragmentation in the Android ecosystem, high levels of stability have proven to be quite achievable. Mobile teams should not accept lower stability from their Android apps and must give priority to their app stability to achieve good results.\n\nA marked difference between industries\nBreaking down our data by industry reveals a relatively high degree of stability overall, with some clear winners and losers.\n\nLeading the pack, educational apps scored an impressive median of 100% crash-free sessions, further confirming the viability of the \u2018five 9s\u2019 stability target. Automotive apps came at a very close second with a 99.99% crash-free session rate.\n\nFood and beverage services scored the lowest median crash-free session rate at 99.79%, followed closely by media and entertainment at 99.84% and advertising at 99.89%. The remaining industries registered a respectable median crash-free score between 99.92% and 99.94%.\n\nLooking through a different lens, we can see that the leading apps across all industries maintain a commendable score, with four industries achieving an almost flawless score of 99.99% or above and only two scoring below 99.95% at the 75th percentile.\n\n\n5-star ratings require 5-star stability\nArguably the most important indicator of a mobile app\u2019s user experience, app store star ratings are a make-or-break factor for mobile app success.\n\nApp store ratings and reviews are the only user-facing indicator of app experience to potential users and the primary standard against which mobile apps are judged by app stores. Improving the quality and quantity of your app\u2019s ratings and reviews allows it to rank higher in user searches, driving traffic to your app store page and boosting downloads and conversion rates.\n\nStability is not the only factor affecting app store rating, but our data shows a clear correlation between an app\u2019s crash-free rate and its star rating, with apps under 3 stars scoring a significantly lower rate of 99.89%.\n\nThis relationship is especially evident when we consider the crash-free score of the least-performing apps, with apps rated between 3 and 4.5 stars scoring around 99.7% and ones above 4.5 stars scoring 99.84% at the 25th percentile.\n\nThis indicates a \u2019critical stability threshold\u2019 of around 99.7% crash-free sessions to reach a 3-star rating, and around 99.85% to exceed 4.5 stars.\n\nStability Beyond Crashes\nWhen measuring app stability, mobile teams must look beyond their crash-free session rate to a more holistic view that includes other important stability issues and frustration signals to ensure they deliver a stable experience when the app is not crashing.\n\nAn app that never crashes but frequently encounters app hangs and Application Not Responding or Out Of Memory errors still offers a poor user experience. Mobile users don\u2019t care what is causing a poor app experience, as long as it is a poor experience they are likely to share it on the app store.\n\nApplication Not Responding errors (ANR)\nDefinition: Instances where an app is unresponsive to user input for more than five seconds, prompting the operating system to notify the app user.\n\nANR errors are a serious and highly disruptive stability issue that severely impacts the mobile app experience. The median number of ANR errors that occur across all apps stands at 0.79 ANR errors for every 10K sessions demonstrating their low overall incidence rate.\n\nHowever, breaking this down by rating reveals that apps rated below three stars scored a significantly higher median score of 4.46, with the rest registering scores between 0.24 and 1.02. This suggests a threshold of around 4 ANRs per 10K sessions above which a mobile app\u2019s star rating might start to suffer.\n\nOut Of Memory errors (OOM)\nDefinition: App terminations by the operating system due to excessive memory usage.\n\nWhile not technically crashes, OOM errors have an equally fatal impact on the user experience. Not far from ANRs, the median number of OOM errors across all apps stands at 0.83 OOM errors for every 10K sessions, also registering a low overall incidence rate.\n\nBreaking this down reveals widely varying OOM scores between 0 and 3.07, with no clear correlation between OOM scores and app store ratings. This could be explained by the low incidence rate of OOM errors overall which doesn\u2019t affect a significant number of sessions.\n\nHowever, considering their similarity to ANRs, it might be safe to assume that OOMs have a similar incidence threshold of around 4 OOMs per 10K sessions above which app store ratings are impacted. Mobile teams must ensure they are able to capture and debug OOM and ANR errors occurring in their apps, keeping an eye out for any spikes and maintaining them below this threshold.", "start_char_idx": 4071, "end_char_idx": 8819, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6ac0203-1897-48df-9cb1-83bd14eb5c34": {"__data__": {"id_": "f6ac0203-1897-48df-9cb1-83bd14eb5c34", "embedding": null, "metadata": {"file_path": "documents/Mobile_App_Stability_Outlook_2023.txt", "file_name": "Mobile_App_Stability_Outlook_2023.txt", "file_type": "text/plain", "file_size": 12160, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd901038-e6e2-4a69-ac42-462d9b235468", "node_type": "4", "metadata": {"file_path": "documents/Mobile_App_Stability_Outlook_2023.txt", "file_name": "Mobile_App_Stability_Outlook_2023.txt", "file_type": "text/plain", "file_size": 12160, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "hash": "1e3f12ec5bcf6d5c635dcb3a8baa2c3bcbcd8786b0ad64acc8eea5b5128701a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1fff9592-5e75-4e17-ab5f-d5f5fc556512", "node_type": "1", "metadata": {"file_path": "documents/Mobile_App_Stability_Outlook_2023.txt", "file_name": "Mobile_App_Stability_Outlook_2023.txt", "file_type": "text/plain", "file_size": 12160, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "hash": "e8b427ffb35cf3bcbe639e04b197759760524cff5867a2d228ec138682cdcce9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "89e72b12-2bc4-40a1-91b4-01307627b8e4", "node_type": "1", "metadata": {}, "hash": "2f590bd198cf99f4c45219e97600257bddd03853362971c1cb9a84232ee02335", "class_name": "RelatedNodeInfo"}}, "text": "While not technically crashes, OOM errors have an equally fatal impact on the user experience. Not far from ANRs, the median number of OOM errors across all apps stands at 0.83 OOM errors for every 10K sessions, also registering a low overall incidence rate.\n\nBreaking this down reveals widely varying OOM scores between 0 and 3.07, with no clear correlation between OOM scores and app store ratings. This could be explained by the low incidence rate of OOM errors overall which doesn\u2019t affect a significant number of sessions.\n\nHowever, considering their similarity to ANRs, it might be safe to assume that OOMs have a similar incidence threshold of around 4 OOMs per 10K sessions above which app store ratings are impacted. Mobile teams must ensure they are able to capture and debug OOM and ANR errors occurring in their apps, keeping an eye out for any spikes and maintaining them below this threshold.\n\nApp hangs\nDefinition: Instances where an app is unresponsive to user input for more than two seconds, but less than five seconds.\n\nWhile not as disruptive as the stability issues previously mentioned, app hangs introduce significant friction to the mobile user experience and can be a leading indicator for the occurrence of ANR and OOM errors.\n\nThe median number of app hangs per 10 thousand sessions steadily increases with app ratings, from 76 per 10K sessions for apps below 3 stars to 132 per 10K sessions for apps above 4.5+, with app ratings seemingly unaffected by the incidence of app hangs.\n\nHowever, when we look at the data for the 75th percentile, we can see that apps with a rating above 3 stars all hover at around 200 app hangs per 10K sessions, while apps rated below three stars scored 334 app hangs per 10K sessions, almost 70% higher.\n\nThis suggests that there is a threshold of about 200 app hangs per 10K sessions above which an app\u2019s star rating could begin to suffer. Again, mobile teams should have the appropriate tools and processes to monitor and debug app hang occurrences to avoid negative app store feedback.\n\nForced restarts\nDefinition: Instances where an app is manually forced to terminate, then restarted within 5 seconds.\n\nForced restarts don\u2019t always indicate the presence of a stability issue, but they are almost always a sign of user frustration. \u2018Turn it off and on again\u2019 is the first reflex for mobile app users who face a misbehaving app, making forced restarts an important metric to monitor.\n\nThe median number of forced restarts across all apps stands at 134 per 10K sessions, though the breakdown by app store ratings does not reveal any clear trends or correlations. While difficult to provide an explanation or recommendation based on this data, it establishes a benchmark for forced restarts that mobile teams could find helpful.\n\nWhile not a north-star metric, tracking the incidence of forced restarts allows mobile teams to watch for spikes that indicate underlying issues and analyze app sessions that experienced forced restarts to understand what caused them.\n\nMeeting Mobile User Expectations\nMobile app stability has come a long way over the past few years, but mobile user expectations have come even further. Mobile users are not content with a 99% crash-free session rate and are not shy about sharing their grievances on the app store.\n\nMobile teams need to adopt a holistic view of their app\u2019s stability and strive to reach a stability score as close to flawless as possible to have a chance to succeed in app stores and outperform their competitors.\n\nAt Instabug, we\u2019re committed to providing mobile teams with the tools they need to deliver exceptional mobile app experiences. Our platform equips you with best-in-class Bug Reporting, comprehensive Crash Reporting, detailed App Performance Monitoring, actionable App Ratings and Reviews monitoring, in-depth Session Replay, and mobile-centric Release Management, allowing you to transform your app quality and elevate your team\u2019s performance.\n\nExplore our sandbox demo dashboard to learn more about how Instabug can help you automate issue reproduction, receive actionable, user-centric insights, streamline your mobile release process, and improve your team\u2019s efficiency.", "start_char_idx": 7913, "end_char_idx": 12110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "89e72b12-2bc4-40a1-91b4-01307627b8e4": {"__data__": {"id_": "89e72b12-2bc4-40a1-91b4-01307627b8e4", "embedding": null, "metadata": {"file_path": "documents/file.txt", "file_name": "file.txt", "file_type": "text/plain", "file_size": 6505, "creation_date": "2024-01-28", "last_modified_date": "2024-01-28", "last_accessed_date": "2024-01-28"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcb4ce42-7449-4469-857a-86386229ca35", "node_type": "4", "metadata": {"file_path": "documents/file.txt", "file_name": "file.txt", "file_type": "text/plain", "file_size": 6505, "creation_date": "2024-01-28", "last_modified_date": "2024-01-28", "last_accessed_date": "2024-01-28"}, "hash": "08ac4ff1087b61296575c44e4d1f27dd39becfc2f51923ee0161ddccb5617119", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f6ac0203-1897-48df-9cb1-83bd14eb5c34", "node_type": "1", "metadata": {"file_path": "documents/Mobile_App_Stability_Outlook_2023.txt", "file_name": "Mobile_App_Stability_Outlook_2023.txt", "file_type": "text/plain", "file_size": 12160, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "hash": "b89caeaee19b004de1f62390252ef5cc1db83dfa3fa5c29520644704ffe53a7a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8e52e210-16a4-4f1c-b9db-19a9ed1d0105", "node_type": "1", "metadata": {}, "hash": "fd75748cfe7c20d75e40f440c15b98979b66723d0b5fdd3d04e5d3dabdd10039", "class_name": "RelatedNodeInfo"}}, "text": "Instabug vs Firebase\nIn this post, we will take a look at two of the top mobile app quality platforms out there, Instabug vs Firebase. These tools can help you monitor your app\u2019s performance and crashes, as well as errors, network requests, battery consumption, and more.\nSimilarities Between Instabug and Firebase\nThe worst-case scenario for any app is encountering a session-ending crash. Both Instabug and Firebase help you stay ahead of negative reviews with detailed crash reporting. With both, you can assess the stack-trace information that led up to the crash to help narrow down fixes. You can also set up alerts to stay up to date with any new critical issues.\nNetwork calls play a huge role in the speed and responsiveness of your app. Usually, network performance is tracked on the server-side. And while that is important it only tells half of the story, both Instabug and Firebase let you track client-side network calls. You will be able to get a drill-down look at network performance and track HTTP requests by their response times, errors, and more.\nTo help narrow down investigations and get a sense of how your app is performing, a lot of details are available for every user. You can filter reports based on OS version, app version, and device.\n\n\nInstabug's Strengths\nCapture every type of crash your users experience\nInstabug helps you get the full picture by capturing all possible crash types that may occur in your app. In addition to ANR errors and NDK and C++ crashes, Instabug also captures OOM errors, SwiftUI exceptions, crashes due to network errors, app hangs, and forced restarts.\n\u200d\nReproduce issues with ease\nWith each crash or bug report, Instabug captures a wealth of useful information that can help you fix issues faster. In addition to all the information Firebase includes with their crash reports, Instabug also includes \u201crepro steps\u201d which maintains a visual record of every step your user has taken on each app view before the crash to help you reproduce issues effortlessly. Instabug also includes a session profiler that captures the state of the device\u2019s CPU, memory, storage, battery, network connectivity, and orientation for the 60 seconds leading up to the crash.\n\u200d\nAlign your team on a north-star performance metric\nApp performance can be difficult to assess when taken as a big picture. Assessing whether or not precious engineering resources need to be devoted to improving performance is one of the biggest challenges mobile teams face. Instabug\u2019s apdex score helps you do just that. With one tell-all score that encompasses app, network, and UI performance as well as app stability, you can make actionable decisions faster. The app apdex score will tell you right on the dashboard whether your users are seeing a satisfying, tolerating, or frustrating experience.\n\u200d\nBest-in-class bug reporting\nInstabug offers the most powerful bug reporting tool for mobile apps on the market. With Instabug\u2019s bug reporting features, your users can easily report bugs that don\u2019t actually crash the app with a simple shake of their phone. For each bug report, Instabug captures a screenshot and lets your users annotate it or add more screenshots or a video recording to explain further. Instabug also automatically captures all the device and environment details, console logs, network logs, user attributes, repro steps, and session profiler to help you quickly reproduce and fix the bug.\n\u200d\nAdvanced filters\nInstabug offers powerful, advanced filters that can help you find the exact issue you are looking for no matter how obscure. You can filter your issues by all data points and create saved filters for quick access to commonly used filters.\n\u200d\nAdvanced and fully customizable alerts and notifications\nInstabug helps you stay on top of incoming issues with a powerful and fully customizable rules engine that allows you to create custom alerts and notifications for virtually any scenario. This will help you keep track of emerging issues and understand their impact on your users as well as enable you to quickly any regressing issues.\n\u200d\nMonitor and debug your app store reviews\nInstabug's App Ratings and Reviews captures all the ratings and reviews your app receives, enabling you to monitor the app store performance of each release and quickly identify emerging issues. More importantly, Instabug automatically identifies sessions that submit in-app ratings and allows you to watch exactly what led to them through Session Replay.\n\u200d\nActively gather user feedback and app reviews\nOften the best way to understand what your users think is to simply ask them. Instabug's In-App Surveys gives you the power to actively source valuable user feedback to inform your roadmap and ensure it is aligned with your users' expectations. Additionally, you can prompt happy users to rate and review your app on the store and replay the sessions of unhappy users to find the source of their frustration.", "start_char_idx": 0, "end_char_idx": 4937, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e52e210-16a4-4f1c-b9db-19a9ed1d0105": {"__data__": {"id_": "8e52e210-16a4-4f1c-b9db-19a9ed1d0105", "embedding": null, "metadata": {"file_path": "documents/file.txt", "file_name": "file.txt", "file_type": "text/plain", "file_size": 6505, "creation_date": "2024-01-28", "last_modified_date": "2024-01-28", "last_accessed_date": "2024-01-28"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcb4ce42-7449-4469-857a-86386229ca35", "node_type": "4", "metadata": {"file_path": "documents/file.txt", "file_name": "file.txt", "file_type": "text/plain", "file_size": 6505, "creation_date": "2024-01-28", "last_modified_date": "2024-01-28", "last_accessed_date": "2024-01-28"}, "hash": "08ac4ff1087b61296575c44e4d1f27dd39becfc2f51923ee0161ddccb5617119", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "89e72b12-2bc4-40a1-91b4-01307627b8e4", "node_type": "1", "metadata": {"file_path": "documents/file.txt", "file_name": "file.txt", "file_type": "text/plain", "file_size": 6505, "creation_date": "2024-01-28", "last_modified_date": "2024-01-28", "last_accessed_date": "2024-01-28"}, "hash": "a2fa4cf62631fdd7e2d1e83f06a2c588f6e14f44189288c1e27396f1243e951a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5a0ea48c-68b8-468b-87e5-14affe61d671", "node_type": "1", "metadata": {}, "hash": "2921e997d0a28fc31e1cf1486ac01491bc648b2e5f4338df343edfab0f120095", "class_name": "RelatedNodeInfo"}}, "text": "This will help you keep track of emerging issues and understand their impact on your users as well as enable you to quickly any regressing issues.\n\u200d\nMonitor and debug your app store reviews\nInstabug's App Ratings and Reviews captures all the ratings and reviews your app receives, enabling you to monitor the app store performance of each release and quickly identify emerging issues. More importantly, Instabug automatically identifies sessions that submit in-app ratings and allows you to watch exactly what led to them through Session Replay.\n\u200d\nActively gather user feedback and app reviews\nOften the best way to understand what your users think is to simply ask them. Instabug's In-App Surveys gives you the power to actively source valuable user feedback to inform your roadmap and ensure it is aligned with your users' expectations. Additionally, you can prompt happy users to rate and review your app on the store and replay the sessions of unhappy users to find the source of their frustration.\n\u200d\nAutomate rollout monitoring and management\nInstabug's Release Management gives you full control over the progress, adoption, health, and app store performance of your version rollouts in one place to help you quickly catch problematic releases and mitigate their impact. You can also set rules to automatically pause a version rollout when it falls below specified stability, performance, and app store rating thresholds, as well as create a rollout schedule to automate staged releases on the Play Store.\n\u200d\nIntegrate with your favorite tools\nIn addition to all the tools that Firebase integrates with, Instabug integrates with a suite of other popular tools like OpsGenie, Zendesk, Asana, Webhooks, and more.\n\u200d\n24/7 support\nOur customer happiness team is available around the clock and throughout the week to help you with any issues you might face and provide you with any needed help or support to get set up. No matter what you need or when you need it, our team will be available to assist you with a quick response and resolution.\n\u200d\nYour data is your own\nWith Instabug, data privacy is our utmost concern. Your data is 100% yours. At no point will Instabug share, monetize, or access your data. Instabug is also compliant with major privacy laws and offers enterprise-grade security to ensure the privacy and security of your app and its users. And with easily customizable auto-masking of user data as well as granular manual customization, you have full control over what data is and isn\u2019t collected from your users.", "start_char_idx": 3935, "end_char_idx": 6464, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5a0ea48c-68b8-468b-87e5-14affe61d671": {"__data__": {"id_": "5a0ea48c-68b8-468b-87e5-14affe61d671", "embedding": null, "metadata": {"file_path": "documents/migration_to_vue.txt", "file_name": "migration_to_vue.txt", "file_type": "text/plain", "file_size": 7412, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fca59c1-b82b-4665-b846-390042bdf7b1", "node_type": "4", "metadata": {"file_path": "documents/migration_to_vue.txt", "file_name": "migration_to_vue.txt", "file_type": "text/plain", "file_size": 7412, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "hash": "12af8a334153af082befb1577952bae4334fd4b033a3681e90f32bb9eeb9c773", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8e52e210-16a4-4f1c-b9db-19a9ed1d0105", "node_type": "1", "metadata": {"file_path": "documents/file.txt", "file_name": "file.txt", "file_type": "text/plain", "file_size": 6505, "creation_date": "2024-01-28", "last_modified_date": "2024-01-28", "last_accessed_date": "2024-01-28"}, "hash": "2c73dc9adc60ec8fc57c436751956740cdd7dcf1d8dfb77b4b8dc83f631be70a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "668a34a7-7e1b-4d1d-b729-857758390c88", "node_type": "1", "metadata": {}, "hash": "09686bf0a20352907279398c49801da031e3eec27e9505816281afecab485708", "class_name": "RelatedNodeInfo"}}, "text": "How We Migrated Our Frontend While Scaling at Instabug\nThe first line of code in Instabug\u2019s dashboard was written in 2014. Looking back at the state of web development back then, we can see that most of the tools and concepts we\u2019re using today did not yet exist or at least were not very mature.\n\n\u200d\n\nThe starting point\n\u200d\n\nAt that time, the trending front-end tools in web development were:\n\nAngularJS: Released by Google in 2010, AngularJS was a framework that combined a number of good practices from different libraries along with a collection of powerful features, and Google was confidently assuring there will be continued support for it.\nAngular: A new framework also released by Google that was still in the beta version; it was not stable and we couldn't rely on it.\nReactJS: A relatively new framework created by Facebook that had just started to become popular.\nVueJS: This was the youngest member of the group; Version 1.0.0 wasn\u2019t even released yet.\nTaking all that into consideration, AngularJS was a good choice to rely on for building our dashboard.\n\nMigration was essential\n\u200d\n\nSince we first chose AngularJS, web development has evolved and witnessed a leap in concepts and tools. Today web development is more complex and sophisticated than it was back in 2014. The reasons that made us choose AngularJS in the first place are not valid anymore and more reasons to migrate have also come up.\n\n\u200d\n\nGoogle's actions\nAngular (not AngularJS) is now considered Google\u2019s darling. All of Google's efforts and support started to be directed mainly toward the maintenance and development of Angular, and very little effort was put into AngularJS. We tolerated and accepted this because Google was still releasing security patches and updates for AngularJS. But that stopped being the case starting from Dec 2021, which is when Google decided to drop the support for AngularJS. They will no longer maintain, update, or provide security patches for AngularJS, which of course was a deal-breaker.\n\nNew technologies\nNewer frameworks such as Vue and React learned a lot from AngularJS's mistakes and mixed in their own flavor and ideas while fixing many of the problems that plagued older frameworks.\n\nFrameworks such as React and Vue have a lot of advantages over older frameworks, like:\n\nThey utilize a virtual DOM which means that they create a representation of the UI which is kept in memory and synced with the real DOM.\nThey are built on up-to-date bundlers such as Webpack and Parcel for source files optimization and better handling of application bundling for production purposes.\nThey have much better routing performance and re-render far faster than AngularJS.\nThey both remove the complexity of two-way binding between controller and views and provide alternative solutions for one-way data flow.\n\nAttracting talent\nAt Instabug, we\u2019re always looking for the best developers out there. We care about our product and good developers are an important pillar of our product. It isn't easy to find good developers working with AngularJS nowadays and the number of developers working with it decreases with time. This is due to the fact that most good developers much prefer working with new technologies and writing new code over working with old technologies and legacy code. Simply put, the best people want to work with the latest tech.\n\nRefactoring opportunity\nThe migration process gave us the opportunity to look back at our code and enhance its quality, and we can use this opportunity to refactor our codebase. By utilizing the latest ECMAScript standards and specifications, and grouping the reusable code together, we can achieve optimized code that is more readable.\n\nChallenges\n\u200d\nWe\u2019ve been developing and maintaining our dashboard using AngularJS since 2014. The codebase is now massive and complex. Therefore, the migration process isn\u2019t a trivial task and it requires a lot of time and effort, not just from front-end developers, but from the testing team too to ensure robust and clean migration. That\u2019s why a number of challenges and concerns presented themselves.\n\nThe business is moving fast\nInstabug is currently in a high growth state with a lot of new features and entirely new products are being shipped continuously. Therefore, the development cycle is always in a state of rapid motion. This makes the migration process more challenging as we need to migrate in parallel with maintaining our codebase and adding new features.\n\nChoosing the right frontend framework\nWe needed to make a decision on the framework we want to migrate to, and at that point, we had 3 options to choose from (Angular 2+, React, Vue).\n\nThe Angular option\n\"WE ARE SORRY ANGULAR, WE JUST CAN'T TRUST YOU ANYMORE\"\n\nChoosing Angular as an option to migrate to had some limitations.", "start_char_idx": 0, "end_char_idx": 4789, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "668a34a7-7e1b-4d1d-b729-857758390c88": {"__data__": {"id_": "668a34a7-7e1b-4d1d-b729-857758390c88", "embedding": null, "metadata": {"file_path": "documents/migration_to_vue.txt", "file_name": "migration_to_vue.txt", "file_type": "text/plain", "file_size": 7412, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fca59c1-b82b-4665-b846-390042bdf7b1", "node_type": "4", "metadata": {"file_path": "documents/migration_to_vue.txt", "file_name": "migration_to_vue.txt", "file_type": "text/plain", "file_size": 7412, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "hash": "12af8a334153af082befb1577952bae4334fd4b033a3681e90f32bb9eeb9c773", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5a0ea48c-68b8-468b-87e5-14affe61d671", "node_type": "1", "metadata": {"file_path": "documents/migration_to_vue.txt", "file_name": "migration_to_vue.txt", "file_type": "text/plain", "file_size": 7412, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}, "hash": "7699096d3aa5b633765623e7a111eda303336cd8dcf1c09a9510454448aa9405", "class_name": "RelatedNodeInfo"}}, "text": "That\u2019s why a number of challenges and concerns presented themselves.\n\nThe business is moving fast\nInstabug is currently in a high growth state with a lot of new features and entirely new products are being shipped continuously. Therefore, the development cycle is always in a state of rapid motion. This makes the migration process more challenging as we need to migrate in parallel with maintaining our codebase and adding new features.\n\nChoosing the right frontend framework\nWe needed to make a decision on the framework we want to migrate to, and at that point, we had 3 options to choose from (Angular 2+, React, Vue).\n\nThe Angular option\n\"WE ARE SORRY ANGULAR, WE JUST CAN'T TRUST YOU ANYMORE\"\n\nChoosing Angular as an option to migrate to had some limitations.\n\nAngular requires a full rewrite of our code which requires a lot of time and effort\nAngular is verbose and complex\nSteep learning curve since it requires TypeScript instead of JavaScript\n\nReact Vs Vue\nAfter dropping Angular out from the competition, We did a lot of investigations comparing React and Vue based on a few criteria:\n\nBasic configuration, CLI, and initial setup time [Vue \u2705]\nCode writing ideology (JSX vs Templates) [ Vue \u2705]\nMarket strength [React \u2705]\nGetting help when needed (documentation and support) [Draw]\nCompatibility with animations [Vue \u2705]\nManipulating changes in DOM [Vue \u2705]\nDependency injection ability [Vue \u2705]\nCode hierarchy and refactoring  Vue \u2705]\nBroadcasting and remote event listening [Vue \u2705]\nAs you can see, for our requirements, Vue won by a mile so we decided to go with VueJS. The key factors for our decision were the time needed for the initial setup, some limitations in React such as JSX, and support for dependency injection.\n\nThe migration process\n\nOur chosen strategy for the migration was to migrate incrementally (divide and conquer!). This meant updating our legacy code by breaking down the system into smaller components and migrating a small piece at a time to reduce the expenses and risks of the migration.\n\nIntroducing NgVue\nThe main challenge here was finding a way to painlessly integrate Vue components within the AngularJS application. We needed to be able to start new feature development using Vue and easily inject it into the currently existing AngularJS pages as well as convert existing features to new Vue components and inject them.\n\nAll these requirements were easily resolved thanks to the NgVue library.\n\nMeet NgVue\nNgVue is a UMD module (Universal Module Definition) that offers a directive called vue-component and a factory called createVueComponent.\nvue-component is a directive that delegates data to a Vue component so VueJS can compile it with the corresponding nodes.\ncreateVueComponent is a factory that converts a Vue component into a reusable directive that is bound to a specific Vue component.\n\u200d\n\nConclusion\n\u200d\n\nMigration can be a monumental project and it requires lots of effort, time, and planning to get right without sacrificing maintenance and development speed. And there\u2019s more than one right to migrate your front-end framework.\n\nHowever, incremental migration was a good way of achieving quality and speed in our migration process. It enabled us to gradually migrate our old components without affecting production while still maintaining a rapid pace of scaling and feature development.", "start_char_idx": 4024, "end_char_idx": 7364, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"bd901038-e6e2-4a69-ac42-462d9b235468": {"node_ids": ["56ba40f2-a99c-4108-af86-9e4746825855", "1fff9592-5e75-4e17-ab5f-d5f5fc556512", "f6ac0203-1897-48df-9cb1-83bd14eb5c34"], "metadata": {"file_path": "documents/Mobile_App_Stability_Outlook_2023.txt", "file_name": "Mobile_App_Stability_Outlook_2023.txt", "file_type": "text/plain", "file_size": 12160, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}}, "dcb4ce42-7449-4469-857a-86386229ca35": {"node_ids": ["89e72b12-2bc4-40a1-91b4-01307627b8e4", "8e52e210-16a4-4f1c-b9db-19a9ed1d0105"], "metadata": {"file_path": "documents/file.txt", "file_name": "file.txt", "file_type": "text/plain", "file_size": 6505, "creation_date": "2024-01-28", "last_modified_date": "2024-01-28", "last_accessed_date": "2024-01-28"}}, "3fca59c1-b82b-4665-b846-390042bdf7b1": {"node_ids": ["5a0ea48c-68b8-468b-87e5-14affe61d671", "668a34a7-7e1b-4d1d-b729-857758390c88"], "metadata": {"file_path": "documents/migration_to_vue.txt", "file_name": "migration_to_vue.txt", "file_type": "text/plain", "file_size": 7412, "creation_date": "2024-01-29", "last_modified_date": "2024-01-29", "last_accessed_date": "2024-01-29"}}}}